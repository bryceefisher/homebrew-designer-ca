@using System.Text.RegularExpressions
@using HomebrewDesigner.Core.DTO
@using HomebrewDesigner.Core.Enums
@model HomebrewDesigner.ViewModels.RecipeVM

<div class="container p-2 m-2 text-center">
    <h1 class="display-2 text-main">Add Recipe:</h1>
    <div class="container text-center mt-5 bg-secondary rounded-5 pe-5 pt-3">
        <form id="hopsForm" asp-action="AddHops" asp-controller="Recipe" method="post">
            <h1 class="display-6 text-main mt-2">Hop Addition 1:</h1>
            <div class="col d-flex">
                <div class="col">
                    <div class="hop-addition-template rounded-2 px-4 pb-4">
                        <h1 class="display-6 text-main mb-3 hop-addition-count-display"></h1>
                        <label asp-for="HopId[0]" class="text-main">Hop</label>
                        <select class="form-select mt-2 bg-secondary text-main" asp-for="HopId[0]">
                            <option selected disabled>Hop</option>
                            @foreach (HopResponse hop in Model.HopList)
                            {
                                <option value="@hop.Id">@hop.Name</option>
                            }
                        </select>
                        <div>
                            <span asp-validation-for="HopId[0]" class="text-green"></span>
                        </div>

                        <!-- Add dynamic fields for the first hop addition -->

                        <label class="form-label mt-1 text-main" asp-for="HopAdditions[0].Use"></label>
                        <select class="form-select text-main bg-secondary" asp-for="HopAdditions[0].Use">
                            <option selected disabled>Use</option>
                            @foreach (var use in Enum.GetNames(typeof(AdditionEnum)))
                            {
                                <option value="@use">@Regex.Replace(use, "([a-z])([A-Z])", "$1 $2")</option>
                            }
                        </select>
                        <div>
                            <span asp-validation-for="HopAdditions[0].Use" class="text-green"></span>
                        </div>
                        <label class="form-label mt-2 text-main" asp-for="HopAdditions[0].BoilTime"></label>
                        <input asp-for="HopAdditions[0].BoilTime" class="form-control text-main bg-secondary" placeholder="Boil Time (min)"/>
                        <div>
                            <span asp-validation-for="HopAdditions[0].BoilTime" class="text-green"></span>
                        </div>
                        <label class="form-label mt-2 text-main" asp-for="HopAdditions[0].DryHopDays"></label>
                        <input asp-for="HopAdditions[0].DryHopDays" class="form-control bg-secondary text-main" placeholder="Dry Hop Time (days)"/>
                        <div>
                            <span asp-validation-for="HopAdditions[0].DryHopDays" class="text-green"></span>
                        </div>
                        <label class="form-label mt-1 text-main" asp-for="HopAdditions[0].Form"></label>
                        <select class="form-select text-main bg-secondary" asp-for="HopAdditions[0].Form">
                            <option selected disabled>Form</option>
                            @foreach (var form in Enum.GetNames(typeof(HopFormEnum)))
                            {
                                <option value="@form">@Regex.Replace(form, "([a-z])([A-Z])", "$1 $2")</option>
                            }
                        </select>
                        <div>
                            <span asp-validation-for="HopAdditions[0].Amount" class="text-green"></span>
                        </div>
                        <label class="form-label mt-2 text-main" asp-for="HopAdditions[0].Amount"></label>
                        <input asp-for="HopAdditions[0].Amount" class="form-control text-main bg-secondary" placeholder="Weight (g)"/>
                        <div>
                            <span asp-validation-for="HopAdditions[0].Amount" class="text-green"></span>
                        </div>
                    </div>

                    <!-- Container for dynamically added hop additions -->
                    <div class="hop-container"></div>

                    <a class="btn btn-main add-hop text-green">+</a>
                </div>

            </div>
            <div class="pb-4">
                <button class="btn btn-main text-green mt-3" type="submit">Next: Recipe Details -----></button>
            </div>
        </form>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
         
            let hopIndex = @Model.Recipe.Hops.Count;
            let hopAddCount = 1;
            
        
            document.querySelector(".add-hop").addEventListener("click", function (event) {
                event.preventDefault();
          
                let template = document.querySelector(".hop-addition-template").cloneNode(true);
       
                hopIndex++;
                

                let elements = template.querySelectorAll("[name]");
                elements.forEach(element => {
                    let name = element.getAttribute("name");
                    element.setAttribute("name", name.replace("[0]", `[${hopIndex}]`));
                });

                let inputs = template.querySelectorAll("input");
                    inputs.forEach(input => {
                        input.value = ""; 
                                            });
             
                template.style.display = "block";
                
              console.log(hopAddCount);
                let displayElement = template.querySelector(".hop-addition-count-display");
                        if (displayElement) {
                            hopAddCount++;
                            displayElement.textContent = `Hop Addition: ${hopAddCount}`;
                        } else {
                            console.error('The display element was not found in the DOM.');
                        }

             
                document.querySelector(".hop-container").appendChild(template);
            });
        });
    </script>
</div>